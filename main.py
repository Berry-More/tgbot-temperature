import time
import schedule
import telebot as tl

from multiprocessing import Process
from telebot import types
from func import add_new_user, is_user_exist, del_user, create_db
from func import get_all_user_id, is_data_transfer_off, get_temp_report


bot = tl.TeleBot('*')


class ProcSchedule:
    def __init__(self):
        self.is_sensor_working = True

    @staticmethod
    def start_schedule():
        schedule.every(60).minutes.do(ProcSchedule.check_data_transfer)
        schedule.every().day.at('12:00').do(ProcSchedule.make_report)

        while True:
            schedule.run_pending()
            time.sleep(1)

    @staticmethod
    def make_report():
        if not is_data_transfer_off():
            temps = get_temp_report()
            text = '''
            üìï –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç:\n\n–°—Ä–µ–¥–Ω—è—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –Ω–∞ DTS –∑–∞ –¥–µ–Ω—å: {0} üå°\n–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ–ø–∞–¥ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä: {1} ü§í
            '''.format(temps[0], temps[1])
            all_id = get_all_user_id()
            for i in all_id:
                bot.send_message(i, text)

    def check_data_transfer(self):
        if is_data_transfer_off() and self.is_sensor_working:
            all_id = get_all_user_id()
            for i in all_id:
                bot.send_message(i, 'üÜò –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —á–∞—Å—ã!')
            self.is_sensor_working = False


@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton('DTS Monitor')
    btn2 = types.KeyboardButton('–û—Ç—á–µ—Ç—ã')
    markup.add(btn1, btn2)
    bot.send_message(message.from_user.id, 'üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?', reply_markup=markup)


@bot.message_handler(content_types=['text'])
def get_text_messages(message):

    if message.text == 'DTS Monitor':
        bot.send_message(
            message.from_user.id,
            'üñ• –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –º–æ–Ω–∏—Ç—Ä–∏–Ω–≥–∞ –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ ' + '[—Å—Å—ã–ª–∫–µ](http://84.237.52.214/visualisation/)',
            parse_mode='Markdown')

    if message.text == '–û—Ç—á–µ—Ç—ã':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton('üìí –Ø —Ö–æ—á—É –ø–æ–ª—É—á–∞—Ç—å –æ—Ç—á–µ—Ç—ã')
        btn2 = types.KeyboardButton('‚ùå –Ø –±–æ–ª—å—à–µ –Ω–µ —Ö–æ—á—É –ø–æ–ª—É—á–∞—Ç—å –æ—Ç—á–µ—Ç—ã')
        btn3 = types.KeyboardButton('üìã –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –æ—Ç—á–µ—Ç')
        markup.add(btn1, btn2, btn3)
        bot.send_message(message.from_user.id,
                         '‚ùì –ö–∞–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –æ—Ç—á–µ—Ç–∞–º–∏ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç?',
                         reply_markup=markup)

    # add user
    if message.text == 'üìí –Ø —Ö–æ—á—É –ø–æ–ª—É—á–∞—Ç—å –æ—Ç—á–µ—Ç—ã':
        if is_user_exist(message.from_user.username):
            bot.send_message(message.from_user.id,
                             '‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {0} —É–∂–µ –ø–æ–ª—É—á–∞–µ—Ç –æ—Ç—á–µ—Ç—ã!'.format(message.from_user.username))
        else:
            add_new_user(message.from_user.id, message.from_user.first_name,
                         message.from_user.last_name, message.from_user.username)
            bot.send_message(message.from_user.id,
                             '‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {0} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!'.format(message.from_user.username))

    # delete user
    if message.text == '‚ùå –Ø –±–æ–ª—å—à–µ –Ω–µ —Ö–æ—á—É –ø–æ–ª—É—á–∞—Ç—å –æ—Ç—á–µ—Ç—ã':
        if is_user_exist(message.from_user.username):
            del_user(message.from_user.username)
            bot.send_message(message.from_user.id,
                             '‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {0} —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!'.format(message.from_user.username))
        else:
            bot.send_message(message.from_user.id,
                             '‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {0} –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!'.format(message.from_user.username))

    # get current report
    if message.text == 'üìã –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π –æ—Ç—á–µ—Ç':
        temps = get_temp_report()
        text = '''
        üìí –¢–µ–∫—É—â–∏–π –æ—Ç—á–µ—Ç:\n\n–°—Ä–µ–¥–Ω—è—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –Ω–∞ DTS –∑–∞ –¥–µ–Ω—å: {0} üå°\n–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ–ø–∞–¥ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä: {1} ü§í
        '''.format(temps[0], temps[1])
        img = open('static/current.png', 'rb')
        bot.send_photo(message.from_user.id, img)
        bot.send_message(message.from_user.id, text)


def start_process():
    Process(target=ProcSchedule.start_schedule, args=()).start()


if __name__ == '__main__':
    create_db()
    start_process()
    bot.polling(none_stop=True, interval=0)
